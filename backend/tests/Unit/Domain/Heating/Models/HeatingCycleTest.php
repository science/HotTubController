<?php

declare(strict_types=1);

namespace Tests\Unit\Domain\Heating\Models;

use PHPUnit\Framework\TestCase;
use HotTubController\Domain\Heating\Models\HeatingCycle;
use DateTime;

class HeatingCycleTest extends TestCase
{
    private HeatingCycle $cycle;

    protected function setUp(): void
    {
        $this->cycle = new HeatingCycle('test-cycle-123');
    }

    public function testInitialization(): void
    {
        $this->assertEquals('test-cycle-123', $this->cycle->getId());
        $this->assertInstanceOf(DateTime::class, $this->cycle->getStartedAt());
        $this->assertInstanceOf(DateTime::class, $this->cycle->getCreatedAt());
        $this->assertEquals(HeatingCycle::STATUS_HEATING, $this->cycle->getStatus());
        $this->assertTrue($this->cycle->isActive());
        $this->assertFalse($this->cycle->isCompleted());
    }

    public function testAutoGeneratedId(): void
    {
        $cycle = new HeatingCycle();
        $this->assertNotEmpty($cycle->getId());
    }

    public function testTargetTemperatureSetting(): void
    {
        $this->cycle->setTargetTemp(102.5);
        $this->assertEquals(102.5, $this->cycle->getTargetTemp());
    }

    public function testCurrentTemperatureSetting(): void
    {
        $this->cycle->setCurrentTemp(95.0);
        $this->assertEquals(95.0, $this->cycle->getCurrentTemp());
        $this->assertInstanceOf(DateTime::class, $this->cycle->getLastCheck());
    }

    public function testStatusTransitions(): void
    {
        // Initially heating
        $this->assertEquals(HeatingCycle::STATUS_HEATING, $this->cycle->getStatus());
        $this->assertTrue($this->cycle->isActive());
        $this->assertFalse($this->cycle->isCompleted());
        $this->assertFalse($this->cycle->hasError());

        // Complete cycle
        $this->cycle->setStatus(HeatingCycle::STATUS_COMPLETED);
        $this->assertEquals(HeatingCycle::STATUS_COMPLETED, $this->cycle->getStatus());
        $this->assertFalse($this->cycle->isActive());
        $this->assertTrue($this->cycle->isCompleted());
        $this->assertFalse($this->cycle->hasError());

        // Stop cycle
        $this->cycle->setStatus(HeatingCycle::STATUS_STOPPED);
        $this->assertTrue($this->cycle->isCompleted());

        // Error state
        $this->cycle->setStatus(HeatingCycle::STATUS_ERROR);
        $this->assertTrue($this->cycle->hasError());
    }

    public function testInvalidStatus(): void
    {
        $this->expectException(\InvalidArgumentException::class);
        $this->cycle->setStatus('invalid_status');
    }

    public function testEstimatedCompletion(): void
    {
        $futureTime = new DateTime('+2 hours');
        $this->cycle->setEstimatedCompletion($futureTime);
        
        $this->assertEquals($futureTime, $this->cycle->getEstimatedCompletion());
        $this->assertIsInt($this->cycle->getEstimatedTimeRemaining());
        $this->assertGreaterThan(0, $this->cycle->getEstimatedTimeRemaining());
    }

    public function testTemperatureDifference(): void
    {
        $this->cycle->setTargetTemp(104.0);
        $this->cycle->setCurrentTemp(98.0);
        
        $this->assertEquals(6.0, $this->cycle->getTemperatureDifference());
    }

    public function testTemperatureDifferenceWithoutCurrentTemp(): void
    {
        $this->cycle->setTargetTemp(104.0);
        $this->assertNull($this->cycle->getTemperatureDifference());
    }

    public function testElapsedTime(): void
    {
        // Set a start time slightly in the past to ensure elapsed time > 0
        $pastTime = new DateTime('-1 second');
        $this->cycle->setStartedAt($pastTime);
        
        $elapsed = $this->cycle->getElapsedTime();
        $this->assertIsInt($elapsed);
        $this->assertGreaterThan(0, $elapsed);
        
        // Sleep for a moment and check again
        sleep(1); // 1 second to ensure difference
        $newElapsed = $this->cycle->getElapsedTime();
        $this->assertGreaterThan($elapsed, $newElapsed);
    }

    public function testMetadata(): void
    {
        $metadata = ['initial_temp' => 88.5, 'heating_rate' => 0.5];
        $this->cycle->setMetadata($metadata);
        
        $this->assertEquals($metadata, $this->cycle->getMetadata());
        
        $this->cycle->addMetadata('new_key', 'new_value');
        $this->assertEquals('new_value', $this->cycle->getMetadata()['new_key']);
    }

    public function testToArray(): void
    {
        $this->cycle->setTargetTemp(104.0);
        $this->cycle->setCurrentTemp(98.0);
        $this->cycle->setStatus(HeatingCycle::STATUS_HEATING);
        
        $array = $this->cycle->toArray();
        
        $this->assertArrayHasKey('id', $array);
        $this->assertArrayHasKey('created_at', $array);
        $this->assertArrayHasKey('started_at', $array);
        $this->assertArrayHasKey('target_temp', $array);
        $this->assertArrayHasKey('current_temp', $array);
        $this->assertArrayHasKey('status', $array);
        
        $this->assertEquals('test-cycle-123', $array['id']);
        $this->assertEquals(104.0, $array['target_temp']);
        $this->assertEquals(98.0, $array['current_temp']);
        $this->assertEquals(HeatingCycle::STATUS_HEATING, $array['status']);
    }

    public function testFromArray(): void
    {
        $data = [
            'id' => 'from-array-123',
            'created_at' => '2024-01-01 12:00:00',
            'started_at' => '2024-01-01 12:00:00',
            'target_temp' => 104.0,
            'current_temp' => 98.0,
            'status' => HeatingCycle::STATUS_COMPLETED,
            'estimated_completion' => '2024-01-01 14:00:00',
            'last_check' => '2024-01-01 13:00:00',
            'metadata' => ['test' => 'value']
        ];
        
        $cycle = new HeatingCycle();
        $cycle->fromArray($data);
        
        $this->assertEquals('from-array-123', $cycle->getId());
        $this->assertEquals(104.0, $cycle->getTargetTemp());
        $this->assertEquals(98.0, $cycle->getCurrentTemp());
        $this->assertEquals(HeatingCycle::STATUS_COMPLETED, $cycle->getStatus());
        $this->assertEquals(['test' => 'value'], $cycle->getMetadata());
    }

    public function testValidation(): void
    {
        // Valid cycle
        $this->cycle->setTargetTemp(104.0);
        $this->assertEmpty($this->cycle->validate());

        // Invalid target temperature (too low)
        $this->cycle->setTargetTemp(0);
        $errors = $this->cycle->validate();
        $this->assertNotEmpty($errors);
        $this->assertStringContainsString('greater than 0', $errors[0]);

        // Invalid target temperature (too high)
        $this->cycle->setTargetTemp(115.0);
        $errors = $this->cycle->validate();
        $this->assertNotEmpty($errors);
        $this->assertStringContainsString('exceed 110Â°F', $errors[0]);
    }

    public function testValidationWithNegativeCurrentTemp(): void
    {
        $this->cycle->setTargetTemp(104.0);
        $this->cycle->setCurrentTemp(-10.0);
        
        $errors = $this->cycle->validate();
        $this->assertNotEmpty($errors);
        $this->assertStringContainsString('cannot be negative', $errors[0]);
    }

    public function testValidationWithInvalidEstimatedCompletion(): void
    {
        $this->cycle->setTargetTemp(104.0);
        $pastTime = new DateTime('-1 hour');
        $this->cycle->setEstimatedCompletion($pastTime);
        
        $errors = $this->cycle->validate();
        $this->assertNotEmpty($errors);
        $this->assertStringContainsString('cannot be before start time', $errors[0]);
    }

    public function testJsonSerialization(): void
    {
        $this->cycle->setTargetTemp(104.0);
        $this->cycle->setCurrentTemp(98.0);
        
        $json = json_encode($this->cycle);
        $this->assertIsString($json);
        
        $decoded = json_decode($json, true);
        $this->assertIsArray($decoded);
        $this->assertEquals('test-cycle-123', $decoded['id']);
        $this->assertEquals(104.0, $decoded['target_temp']);
    }

    public function testStorageKey(): void
    {
        $this->assertEquals('heating_cycles_rotated', HeatingCycle::getStorageKey());
    }

    public function testTimeHandling(): void
    {
        $startTime = new DateTime('2024-01-01 10:00:00');
        $this->cycle->setStartedAt($startTime);
        
        $this->assertEquals($startTime, $this->cycle->getStartedAt());
        $this->assertInstanceOf(DateTime::class, $this->cycle->getUpdatedAt());
    }

    public function testEstimatedTimeRemainingPastDue(): void
    {
        $pastTime = new DateTime('-1 hour');
        $this->cycle->setEstimatedCompletion($pastTime);
        
        $this->assertEquals(0, $this->cycle->getEstimatedTimeRemaining());
    }
}